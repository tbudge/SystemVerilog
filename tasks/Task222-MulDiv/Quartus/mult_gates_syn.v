// megafunction wizard: %LPM_MULT%
// GENERATION: STANDARD
// VERSION: WM1.0
// MODULE: lpm_mult 

// ============================================================
// File Name: mult_gates.v
// Megafunction Name(s):
// 			lpm_mult
//
// Simulation Library Files(s):
// 			lpm
// ============================================================
// ************************************************************
// THIS IS A WIZARD-GENERATED FILE. DO NOT EDIT THIS FILE!
//
// 20.1.1 Build 720 11/11/2020 SJ Lite Edition
// ************************************************************


//Copyright (C) 2020  Intel Corporation. All rights reserved.
//Your use of Intel Corporation's design tools, logic functions 
//and other software and tools, and any partner logic 
//functions, and any output files from any of the foregoing 
//(including device programming or simulation files), and any 
//associated documentation or information are expressly subject 
//to the terms and conditions of the Intel Program License 
//Subscription Agreement, the Intel Quartus Prime License Agreement,
//the Intel FPGA IP License Agreement, or other applicable license
//agreement, including, without limitation, that your use is for
//the sole purpose of programming logic devices manufactured by
//Intel and sold by Intel or its authorized distributors.  Please
//refer to the applicable agreement for further details, at
//https://fpgasoftware.intel.com/eula.


//lpm_mult DEDICATED_MULTIPLIER_CIRCUITRY="NO" DEVICE_FAMILY="Cyclone IV E" LPM_REPRESENTATION="UNSIGNED" LPM_WIDTHA=8 LPM_WIDTHB=8 LPM_WIDTHP=16 MAXIMIZE_SPEED=9 dataa datab result
//VERSION_BEGIN 20.1 cbx_cycloneii 2020:11:11:17:06:45:SJ cbx_lpm_add_sub 2020:11:11:17:06:45:SJ cbx_lpm_mult 2020:11:11:17:06:45:SJ cbx_mgl 2020:11:11:17:08:38:SJ cbx_nadder 2020:11:11:17:06:46:SJ cbx_padd 2020:11:11:17:06:46:SJ cbx_stratix 2020:11:11:17:06:46:SJ cbx_stratixii 2020:11:11:17:06:46:SJ cbx_util_mgl 2020:11:11:17:06:46:SJ  VERSION_END
// synthesis VERILOG_INPUT_VERSION VERILOG_2001
// altera message_off 10463



//adder DEVICE_FAMILY="Cyclone IV E" WIDTH=16 dataa datab result
//VERSION_BEGIN 20.1 cbx_mgl 2020:11:11:17:08:38:SJ cbx_stratixii 2020:11:11:17:06:46:SJ cbx_util_mgl 2020:11:11:17:06:46:SJ  VERSION_END


//adder DEVICE_FAMILY="Cyclone IV E" WIDTH=13 dataa datab result
//VERSION_BEGIN 20.1 cbx_mgl 2020:11:11:17:08:38:SJ cbx_stratixii 2020:11:11:17:06:46:SJ cbx_util_mgl 2020:11:11:17:06:46:SJ  VERSION_END


//adder DEVICE_FAMILY="Cyclone IV E" WIDTH=7 dataa datab result
//VERSION_BEGIN 20.1 cbx_mgl 2020:11:11:17:08:38:SJ cbx_stratixii 2020:11:11:17:06:46:SJ cbx_util_mgl 2020:11:11:17:06:46:SJ  VERSION_END


//adder DEVICE_FAMILY="Cyclone IV E" WIDTH=3 dataa datab result
//VERSION_BEGIN 20.1 cbx_mgl 2020:11:11:17:08:38:SJ cbx_stratixii 2020:11:11:17:06:46:SJ cbx_util_mgl 2020:11:11:17:06:46:SJ  VERSION_END


//adder DEVICE_FAMILY="Cyclone IV E" WIDTH=19 dataa datab result
//VERSION_BEGIN 20.1 cbx_mgl 2020:11:11:17:08:38:SJ cbx_stratixii 2020:11:11:17:06:46:SJ cbx_util_mgl 2020:11:11:17:06:46:SJ  VERSION_END

//synthesis_resources = lut 117 
//synopsys translate_off
`timescale 1 ps / 1 ps
//synopsys translate_on
module  mult_gates_mult
	( 
	dataa,
	datab,
	result) /* synthesis synthesis_clearbox=1 */;
	input   [7:0]  dataa;
	input   [7:0]  datab;
	output   [15:0]  result;

	wire	[15:0]	wire_add12_result;
	wire	[12:0]	wire_add16_result;
	wire	[6:0]	wire_add20_result;
	wire	[2:0]	wire_add24_result;
	wire	[18:0]	wire_add8_result;
	wire  [0:0]   wire_cs1a_0cout;
	wire  [0:0]   wire_cs1a_1cout;
	wire  [0:0]   wire_cs1a_2cout;
	wire  [0:0]   wire_cs1a_3cout;
	wire  [0:0]   wire_cs1a_0sout;
	wire  [0:0]   wire_cs1a_1sout;
	wire  [0:0]   wire_cs1a_2sout;
	wire  [0:0]   wire_cs1a_3sout;
	wire  [0:0]   wire_cs2a_0cout;
	wire  [0:0]   wire_cs2a_1cout;
	wire  [0:0]   wire_cs2a_2cout;
	wire  [0:0]   wire_cs2a_3cout;
	wire  [0:0]   wire_cs2a_0sout;
	wire  [0:0]   wire_cs2a_1sout;
	wire  [0:0]   wire_cs2a_2sout;
	wire  [0:0]   wire_cs2a_3sout;
	wire  [9:0]   wire_le3a_in;
	wire  [9:0]   wire_le3a_out;
	wire  [9:0]   wire_le4a_in;
	wire  [9:0]   wire_le4a_out;
	wire  [9:0]   wire_le5a_in;
	wire  [9:0]   wire_le5a_out;
	wire  [9:0]   wire_le6a_in;
	wire  [9:0]   wire_le6a_out;
	wire  [8:0]   wire_le7a_in;
	wire  [8:0]   wire_le7a_out;
	wire  [18:0]   wire_sft10a_in;
	wire  [18:0]   wire_sft10a_out;
	wire  [18:0]   wire_sft11a_in;
	wire  [18:0]   wire_sft11a_out;
	wire  [15:0]   wire_sft13a_in;
	wire  [15:0]   wire_sft13a_out;
	wire  [15:0]   wire_sft14a_in;
	wire  [15:0]   wire_sft14a_out;
	wire  [15:0]   wire_sft15a_in;
	wire  [15:0]   wire_sft15a_out;
	wire  [12:0]   wire_sft17a_in;
	wire  [12:0]   wire_sft17a_out;
	wire  [12:0]   wire_sft18a_in;
	wire  [12:0]   wire_sft18a_out;
	wire  [12:0]   wire_sft19a_in;
	wire  [12:0]   wire_sft19a_out;
	wire  [6:0]   wire_sft21a_in;
	wire  [6:0]   wire_sft21a_out;
	wire  [6:0]   wire_sft22a_in;
	wire  [6:0]   wire_sft22a_out;
	wire  [6:0]   wire_sft23a_in;
	wire  [6:0]   wire_sft23a_out;
	wire  [2:0]   wire_sft25a_in;
	wire  [2:0]   wire_sft25a_out;
	wire  [2:0]   wire_sft26a_in;
	wire  [2:0]   wire_sft26a_out;
	wire  [2:0]   wire_sft27a_in;
	wire  [2:0]   wire_sft27a_out;
	wire  [18:0]   wire_sft9a_in;
	wire  [18:0]   wire_sft9a_out;
	wire  [7:0]  dataa_node;
	wire  [7:0]  datab_node;
	wire  [15:0]  final_result_node;
	wire  [9:0]  w101w;
	wire  [9:0]  w156w;
	wire  [9:0]  w204w;
	wire  [9:0]  w260w;
	wire  w323w;
	wire  w347w;
	wire  [18:0]  w514w;
	wire  [9:0]  w7w;

	assign
		wire_add12_result = wire_sft13a_out + wire_sft14a_out;
	assign
		wire_add16_result = wire_sft17a_out + wire_sft18a_out;
	assign
		wire_add20_result = wire_sft21a_out + wire_sft22a_out;
	assign
		wire_add24_result = wire_sft25a_out + wire_sft26a_out;
	assign
		wire_add8_result = wire_sft9a_out + wire_sft10a_out;
	carry_sum   cs1a_0
	( 
	.cin(w7w[1]),
	.cout(wire_cs1a_0cout[0:0]),
	.sin(w7w[1]),
	.sout(wire_cs1a_0sout[0:0]));
	carry_sum   cs1a_1
	( 
	.cin(((w7w[2] & wire_cs1a_0cout[0:0]) | w7w[3])),
	.cout(wire_cs1a_1cout[0:0]),
	.sin(((((((~ w7w[3]) & w7w[2]) & wire_cs1a_0cout[0:0]) | ((w7w[3] & w7w[2]) & (~ wire_cs1a_0cout[0:0]))) | ((w7w[3] & (~ w7w[2])) & wire_cs1a_0cout[0:0])) | ((w7w[3] & (~ w7w[2])) & (~ wire_cs1a_0cout[0:0])))),
	.sout(wire_cs1a_1sout[0:0]));
	carry_sum   cs1a_2
	( 
	.cin(((w7w[4] & wire_cs1a_1cout[0:0]) | w7w[5])),
	.cout(wire_cs1a_2cout[0:0]),
	.sin(((((((~ w7w[5]) & w7w[4]) & wire_cs1a_1cout[0:0]) | ((w7w[5] & w7w[4]) & (~ wire_cs1a_1cout[0:0]))) | ((w7w[5] & (~ w7w[4])) & wire_cs1a_1cout[0:0])) | ((w7w[5] & (~ w7w[4])) & (~ wire_cs1a_1cout[0:0])))),
	.sout(wire_cs1a_2sout[0:0]));
	carry_sum   cs1a_3
	( 
	.cin((wire_cs1a_2cout[0:0] & w7w[6])),
	.cout(wire_cs1a_3cout[0:0]),
	.sin((wire_cs1a_2cout[0:0] & w7w[6])),
	.sout(wire_cs1a_3sout[0:0]));
	carry_sum   cs1a_4
	( 
	.cin(((w7w[8] & wire_cs1a_3cout[0:0]) | w7w[9])),
	.cout(),
	.sin(((((((~ w7w[9]) & w7w[8]) & wire_cs1a_3cout[0:0]) | ((w7w[9] & w7w[8]) & (~ wire_cs1a_3cout[0:0]))) | ((w7w[9] & (~ w7w[8])) & wire_cs1a_3cout[0:0])) | ((w7w[9] & (~ w7w[8])) & (~ wire_cs1a_3cout[0:0])))),
	.sout());
	carry_sum   cs2a_0
	( 
	.cin(w7w[1]),
	.cout(wire_cs2a_0cout[0:0]),
	.sin(w7w[0]),
	.sout(wire_cs2a_0sout[0:0]));
	carry_sum   cs2a_1
	( 
	.cin(((w7w[2] & wire_cs2a_0cout[0:0]) | w7w[3])),
	.cout(wire_cs2a_1cout[0:0]),
	.sin(((((((~ w7w[3]) & (~ w7w[2])) & wire_cs2a_0cout[0:0]) | (((~ w7w[3]) & w7w[2]) & (~ wire_cs2a_0cout[0:0]))) | ((w7w[3] & w7w[2]) & (~ wire_cs2a_0cout[0:0]))) | ((w7w[3] & (~ w7w[2])) & wire_cs2a_0cout[0:0]))),
	.sout(wire_cs2a_1sout[0:0]));
	carry_sum   cs2a_2
	( 
	.cin(((w7w[4] & wire_cs2a_1cout[0:0]) | w7w[5])),
	.cout(wire_cs2a_2cout[0:0]),
	.sin(((((((~ w7w[5]) & (~ w7w[4])) & wire_cs2a_1cout[0:0]) | (((~ w7w[5]) & w7w[4]) & (~ wire_cs2a_1cout[0:0]))) | ((w7w[5] & w7w[4]) & (~ wire_cs2a_1cout[0:0]))) | ((w7w[5] & (~ w7w[4])) & wire_cs2a_1cout[0:0]))),
	.sout(wire_cs2a_2sout[0:0]));
	carry_sum   cs2a_3
	( 
	.cin((wire_cs2a_2cout[0:0] ^ w7w[6])),
	.cout(wire_cs2a_3cout[0:0]),
	.sin((wire_cs2a_2cout[0:0] ^ w7w[6])),
	.sout(wire_cs2a_3sout[0:0]));
	carry_sum   cs2a_4
	( 
	.cin(((w7w[8] & wire_cs2a_3cout[0:0]) | w7w[9])),
	.cout(),
	.sin(((((((~ w7w[9]) & (~ w7w[8])) & wire_cs2a_3cout[0:0]) | (((~ w7w[9]) & w7w[8]) & (~ wire_cs2a_3cout[0:0]))) | ((w7w[9] & w7w[8]) & (~ wire_cs2a_3cout[0:0]))) | ((w7w[9] & (~ w7w[8])) & wire_cs2a_3cout[0:0]))),
	.sout());
	lcell   le3a_0
	( 
	.in(wire_le3a_in[0:0]),
	.out(wire_le3a_out[0:0]));
	lcell   le3a_1
	( 
	.in(wire_le3a_in[1:1]),
	.out(wire_le3a_out[1:1]));
	lcell   le3a_2
	( 
	.in(wire_le3a_in[2:2]),
	.out(wire_le3a_out[2:2]));
	lcell   le3a_3
	( 
	.in(wire_le3a_in[3:3]),
	.out(wire_le3a_out[3:3]));
	lcell   le3a_4
	( 
	.in(wire_le3a_in[4:4]),
	.out(wire_le3a_out[4:4]));
	lcell   le3a_5
	( 
	.in(wire_le3a_in[5:5]),
	.out(wire_le3a_out[5:5]));
	lcell   le3a_6
	( 
	.in(wire_le3a_in[6:6]),
	.out(wire_le3a_out[6:6]));
	lcell   le3a_7
	( 
	.in(wire_le3a_in[7:7]),
	.out(wire_le3a_out[7:7]));
	lcell   le3a_8
	( 
	.in(wire_le3a_in[8:8]),
	.out(wire_le3a_out[8:8]));
	lcell   le3a_9
	( 
	.in(wire_le3a_in[9:9]),
	.out(wire_le3a_out[9:9]));
	assign
		wire_le3a_in = (~ ((~ (((~ {1'b0, dataa_node, 1'b0}) & {10{wire_cs1a_0sout[0:0]}}) & {10{(~ wire_cs2a_0sout[0:0])}})) & (~ ((((~ {{2{1'b0}}, dataa_node}) & {10{wire_cs1a_0sout[0:0]}}) & {10{wire_cs2a_0sout[0:0]}}) | (({{2{1'b0}}, dataa_node} & {10{(~ wire_cs1a_0sout[0:0])}}) & {10{wire_cs2a_0sout[0:0]}})))));
	lcell   le4a_0
	( 
	.in(wire_le4a_in[0:0]),
	.out(wire_le4a_out[0:0]));
	lcell   le4a_1
	( 
	.in(wire_le4a_in[1:1]),
	.out(wire_le4a_out[1:1]));
	lcell   le4a_2
	( 
	.in(wire_le4a_in[2:2]),
	.out(wire_le4a_out[2:2]));
	lcell   le4a_3
	( 
	.in(wire_le4a_in[3:3]),
	.out(wire_le4a_out[3:3]));
	lcell   le4a_4
	( 
	.in(wire_le4a_in[4:4]),
	.out(wire_le4a_out[4:4]));
	lcell   le4a_5
	( 
	.in(wire_le4a_in[5:5]),
	.out(wire_le4a_out[5:5]));
	lcell   le4a_6
	( 
	.in(wire_le4a_in[6:6]),
	.out(wire_le4a_out[6:6]));
	lcell   le4a_7
	( 
	.in(wire_le4a_in[7:7]),
	.out(wire_le4a_out[7:7]));
	lcell   le4a_8
	( 
	.in(wire_le4a_in[8:8]),
	.out(wire_le4a_out[8:8]));
	lcell   le4a_9
	( 
	.in(wire_le4a_in[9:9]),
	.out(wire_le4a_out[9:9]));
	assign
		wire_le4a_in = (~ ((~ (((~ {1'b0, dataa_node, 1'b0}) & {10{wire_cs1a_1sout[0:0]}}) & {10{(~ wire_cs2a_1sout[0:0])}})) & (~ ((((~ {{2{1'b0}}, dataa_node}) & {10{wire_cs1a_1sout[0:0]}}) & {10{wire_cs2a_1sout[0:0]}}) | (({{2{1'b0}}, dataa_node} & {10{(~ wire_cs1a_1sout[0:0])}}) & {10{wire_cs2a_1sout[0:0]}})))));
	lcell   le5a_0
	( 
	.in(wire_le5a_in[0:0]),
	.out(wire_le5a_out[0:0]));
	lcell   le5a_1
	( 
	.in(wire_le5a_in[1:1]),
	.out(wire_le5a_out[1:1]));
	lcell   le5a_2
	( 
	.in(wire_le5a_in[2:2]),
	.out(wire_le5a_out[2:2]));
	lcell   le5a_3
	( 
	.in(wire_le5a_in[3:3]),
	.out(wire_le5a_out[3:3]));
	lcell   le5a_4
	( 
	.in(wire_le5a_in[4:4]),
	.out(wire_le5a_out[4:4]));
	lcell   le5a_5
	( 
	.in(wire_le5a_in[5:5]),
	.out(wire_le5a_out[5:5]));
	lcell   le5a_6
	( 
	.in(wire_le5a_in[6:6]),
	.out(wire_le5a_out[6:6]));
	lcell   le5a_7
	( 
	.in(wire_le5a_in[7:7]),
	.out(wire_le5a_out[7:7]));
	lcell   le5a_8
	( 
	.in(wire_le5a_in[8:8]),
	.out(wire_le5a_out[8:8]));
	lcell   le5a_9
	( 
	.in(wire_le5a_in[9:9]),
	.out(wire_le5a_out[9:9]));
	assign
		wire_le5a_in = (~ ((~ (((~ {1'b0, dataa_node, 1'b0}) & {10{wire_cs1a_2sout[0:0]}}) & {10{(~ wire_cs2a_2sout[0:0])}})) & (~ ((((~ {{2{1'b0}}, dataa_node}) & {10{wire_cs1a_2sout[0:0]}}) & {10{wire_cs2a_2sout[0:0]}}) | (({{2{1'b0}}, dataa_node} & {10{(~ wire_cs1a_2sout[0:0])}}) & {10{wire_cs2a_2sout[0:0]}})))));
	lcell   le6a_0
	( 
	.in(wire_le6a_in[0:0]),
	.out(wire_le6a_out[0:0]));
	lcell   le6a_1
	( 
	.in(wire_le6a_in[1:1]),
	.out(wire_le6a_out[1:1]));
	lcell   le6a_2
	( 
	.in(wire_le6a_in[2:2]),
	.out(wire_le6a_out[2:2]));
	lcell   le6a_3
	( 
	.in(wire_le6a_in[3:3]),
	.out(wire_le6a_out[3:3]));
	lcell   le6a_4
	( 
	.in(wire_le6a_in[4:4]),
	.out(wire_le6a_out[4:4]));
	lcell   le6a_5
	( 
	.in(wire_le6a_in[5:5]),
	.out(wire_le6a_out[5:5]));
	lcell   le6a_6
	( 
	.in(wire_le6a_in[6:6]),
	.out(wire_le6a_out[6:6]));
	lcell   le6a_7
	( 
	.in(wire_le6a_in[7:7]),
	.out(wire_le6a_out[7:7]));
	lcell   le6a_8
	( 
	.in(wire_le6a_in[8:8]),
	.out(wire_le6a_out[8:8]));
	lcell   le6a_9
	( 
	.in(wire_le6a_in[9:9]),
	.out(wire_le6a_out[9:9]));
	assign
		wire_le6a_in = (({10{wire_cs1a_3sout[0:0]}} & {1'b0, dataa_node, 1'b0}) | ({10{wire_cs2a_3sout[0:0]}} & w260w));
	lcell   le7a_0
	( 
	.in(wire_le7a_in[0:0]),
	.out(wire_le7a_out[0:0]));
	lcell   le7a_1
	( 
	.in(wire_le7a_in[1:1]),
	.out(wire_le7a_out[1:1]));
	lcell   le7a_2
	( 
	.in(wire_le7a_in[2:2]),
	.out(wire_le7a_out[2:2]));
	lcell   le7a_3
	( 
	.in(wire_le7a_in[3:3]),
	.out(wire_le7a_out[3:3]));
	lcell   le7a_4
	( 
	.in(wire_le7a_in[4:4]),
	.out(wire_le7a_out[4:4]));
	lcell   le7a_5
	( 
	.in(wire_le7a_in[5:5]),
	.out(wire_le7a_out[5:5]));
	lcell   le7a_6
	( 
	.in(wire_le7a_in[6:6]),
	.out(wire_le7a_out[6:6]));
	lcell   le7a_7
	( 
	.in(wire_le7a_in[7:7]),
	.out(wire_le7a_out[7:7]));
	lcell   le7a_8
	( 
	.in(wire_le7a_in[8:8]),
	.out(wire_le7a_out[8:8]));
	assign
		wire_le7a_in = ({9{w7w[7]}} & {1'b0, dataa_node});
	soft   sft10a_0
	( 
	.in(wire_sft10a_in[0:0]),
	.out(wire_sft10a_out[0:0]));
	soft   sft10a_1
	( 
	.in(wire_sft10a_in[1:1]),
	.out(wire_sft10a_out[1:1]));
	soft   sft10a_2
	( 
	.in(wire_sft10a_in[2:2]),
	.out(wire_sft10a_out[2:2]));
	soft   sft10a_3
	( 
	.in(wire_sft10a_in[3:3]),
	.out(wire_sft10a_out[3:3]));
	soft   sft10a_4
	( 
	.in(wire_sft10a_in[4:4]),
	.out(wire_sft10a_out[4:4]));
	soft   sft10a_5
	( 
	.in(wire_sft10a_in[5:5]),
	.out(wire_sft10a_out[5:5]));
	soft   sft10a_6
	( 
	.in(wire_sft10a_in[6:6]),
	.out(wire_sft10a_out[6:6]));
	soft   sft10a_7
	( 
	.in(wire_sft10a_in[7:7]),
	.out(wire_sft10a_out[7:7]));
	soft   sft10a_8
	( 
	.in(wire_sft10a_in[8:8]),
	.out(wire_sft10a_out[8:8]));
	soft   sft10a_9
	( 
	.in(wire_sft10a_in[9:9]),
	.out(wire_sft10a_out[9:9]));
	soft   sft10a_10
	( 
	.in(wire_sft10a_in[10:10]),
	.out(wire_sft10a_out[10:10]));
	soft   sft10a_11
	( 
	.in(wire_sft10a_in[11:11]),
	.out(wire_sft10a_out[11:11]));
	soft   sft10a_12
	( 
	.in(wire_sft10a_in[12:12]),
	.out(wire_sft10a_out[12:12]));
	soft   sft10a_13
	( 
	.in(wire_sft10a_in[13:13]),
	.out(wire_sft10a_out[13:13]));
	soft   sft10a_14
	( 
	.in(wire_sft10a_in[14:14]),
	.out(wire_sft10a_out[14:14]));
	soft   sft10a_15
	( 
	.in(wire_sft10a_in[15:15]),
	.out(wire_sft10a_out[15:15]));
	soft   sft10a_16
	( 
	.in(wire_sft10a_in[16:16]),
	.out(wire_sft10a_out[16:16]));
	soft   sft10a_17
	( 
	.in(wire_sft10a_in[17:17]),
	.out(wire_sft10a_out[17:17]));
	soft   sft10a_18
	( 
	.in(wire_sft10a_in[18:18]),
	.out(wire_sft10a_out[18:18]));
	assign
		wire_sft10a_in = {w347w, {wire_sft15a_out[15], {wire_sft19a_out[12], {wire_sft19a_out[11], {wire_sft19a_out[10], {wire_sft19a_out[9], {wire_sft19a_out[8], {wire_sft19a_out[7], {wire_sft19a_out[6], {wire_sft19a_out[5], {wire_sft19a_out[4], {wire_sft19a_out[3], {wire_sft19a_out[2], {wire_sft19a_out[1], {wire_sft19a_out[0], {wire_sft15a_out[1], {wire_sft15a_out[0], {w347w, wire_cs1a_0sout}}}}}}}}}}}}}}}}}};
	soft   sft11a_0
	( 
	.in(wire_sft11a_in[0:0]),
	.out(wire_sft11a_out[0:0]));
	soft   sft11a_1
	( 
	.in(wire_sft11a_in[1:1]),
	.out(wire_sft11a_out[1:1]));
	soft   sft11a_2
	( 
	.in(wire_sft11a_in[2:2]),
	.out(wire_sft11a_out[2:2]));
	soft   sft11a_3
	( 
	.in(wire_sft11a_in[3:3]),
	.out(wire_sft11a_out[3:3]));
	soft   sft11a_4
	( 
	.in(wire_sft11a_in[4:4]),
	.out(wire_sft11a_out[4:4]));
	soft   sft11a_5
	( 
	.in(wire_sft11a_in[5:5]),
	.out(wire_sft11a_out[5:5]));
	soft   sft11a_6
	( 
	.in(wire_sft11a_in[6:6]),
	.out(wire_sft11a_out[6:6]));
	soft   sft11a_7
	( 
	.in(wire_sft11a_in[7:7]),
	.out(wire_sft11a_out[7:7]));
	soft   sft11a_8
	( 
	.in(wire_sft11a_in[8:8]),
	.out(wire_sft11a_out[8:8]));
	soft   sft11a_9
	( 
	.in(wire_sft11a_in[9:9]),
	.out(wire_sft11a_out[9:9]));
	soft   sft11a_10
	( 
	.in(wire_sft11a_in[10:10]),
	.out(wire_sft11a_out[10:10]));
	soft   sft11a_11
	( 
	.in(wire_sft11a_in[11:11]),
	.out(wire_sft11a_out[11:11]));
	soft   sft11a_12
	( 
	.in(wire_sft11a_in[12:12]),
	.out(wire_sft11a_out[12:12]));
	soft   sft11a_13
	( 
	.in(wire_sft11a_in[13:13]),
	.out(wire_sft11a_out[13:13]));
	soft   sft11a_14
	( 
	.in(wire_sft11a_in[14:14]),
	.out(wire_sft11a_out[14:14]));
	soft   sft11a_15
	( 
	.in(wire_sft11a_in[15:15]),
	.out(wire_sft11a_out[15:15]));
	soft   sft11a_16
	( 
	.in(wire_sft11a_in[16:16]),
	.out(wire_sft11a_out[16:16]));
	soft   sft11a_17
	( 
	.in(wire_sft11a_in[17:17]),
	.out(wire_sft11a_out[17:17]));
	soft   sft11a_18
	( 
	.in(wire_sft11a_in[18:18]),
	.out(wire_sft11a_out[18:18]));
	assign
		wire_sft11a_in = wire_add8_result;
	soft   sft13a_0
	( 
	.in(wire_sft13a_in[0:0]),
	.out(wire_sft13a_out[0:0]));
	soft   sft13a_1
	( 
	.in(wire_sft13a_in[1:1]),
	.out(wire_sft13a_out[1:1]));
	soft   sft13a_2
	( 
	.in(wire_sft13a_in[2:2]),
	.out(wire_sft13a_out[2:2]));
	soft   sft13a_3
	( 
	.in(wire_sft13a_in[3:3]),
	.out(wire_sft13a_out[3:3]));
	soft   sft13a_4
	( 
	.in(wire_sft13a_in[4:4]),
	.out(wire_sft13a_out[4:4]));
	soft   sft13a_5
	( 
	.in(wire_sft13a_in[5:5]),
	.out(wire_sft13a_out[5:5]));
	soft   sft13a_6
	( 
	.in(wire_sft13a_in[6:6]),
	.out(wire_sft13a_out[6:6]));
	soft   sft13a_7
	( 
	.in(wire_sft13a_in[7:7]),
	.out(wire_sft13a_out[7:7]));
	soft   sft13a_8
	( 
	.in(wire_sft13a_in[8:8]),
	.out(wire_sft13a_out[8:8]));
	soft   sft13a_9
	( 
	.in(wire_sft13a_in[9:9]),
	.out(wire_sft13a_out[9:9]));
	soft   sft13a_10
	( 
	.in(wire_sft13a_in[10:10]),
	.out(wire_sft13a_out[10:10]));
	soft   sft13a_11
	( 
	.in(wire_sft13a_in[11:11]),
	.out(wire_sft13a_out[11:11]));
	soft   sft13a_12
	( 
	.in(wire_sft13a_in[12:12]),
	.out(wire_sft13a_out[12:12]));
	soft   sft13a_13
	( 
	.in(wire_sft13a_in[13:13]),
	.out(wire_sft13a_out[13:13]));
	soft   sft13a_14
	( 
	.in(wire_sft13a_in[14:14]),
	.out(wire_sft13a_out[14:14]));
	soft   sft13a_15
	( 
	.in(wire_sft13a_in[15:15]),
	.out(wire_sft13a_out[15:15]));
	assign
		wire_sft13a_in = {w347w, {w323w, {wire_le7a_out[8], {wire_le7a_out[7], {wire_le7a_out[6], {wire_le7a_out[5], {wire_le7a_out[4], {wire_le7a_out[3], {wire_le7a_out[2], {wire_le7a_out[1], {wire_le7a_out[0], {wire_le6a_out[0], {wire_le5a_out[1], {wire_le5a_out[0], {wire_le3a_out[3:2]}}}}}}}}}}}}}}};
	soft   sft14a_0
	( 
	.in(wire_sft14a_in[0:0]),
	.out(wire_sft14a_out[0:0]));
	soft   sft14a_1
	( 
	.in(wire_sft14a_in[1:1]),
	.out(wire_sft14a_out[1:1]));
	soft   sft14a_2
	( 
	.in(wire_sft14a_in[2:2]),
	.out(wire_sft14a_out[2:2]));
	soft   sft14a_3
	( 
	.in(wire_sft14a_in[3:3]),
	.out(wire_sft14a_out[3:3]));
	soft   sft14a_4
	( 
	.in(wire_sft14a_in[4:4]),
	.out(wire_sft14a_out[4:4]));
	soft   sft14a_5
	( 
	.in(wire_sft14a_in[5:5]),
	.out(wire_sft14a_out[5:5]));
	soft   sft14a_6
	( 
	.in(wire_sft14a_in[6:6]),
	.out(wire_sft14a_out[6:6]));
	soft   sft14a_7
	( 
	.in(wire_sft14a_in[7:7]),
	.out(wire_sft14a_out[7:7]));
	soft   sft14a_8
	( 
	.in(wire_sft14a_in[8:8]),
	.out(wire_sft14a_out[8:8]));
	soft   sft14a_9
	( 
	.in(wire_sft14a_in[9:9]),
	.out(wire_sft14a_out[9:9]));
	soft   sft14a_10
	( 
	.in(wire_sft14a_in[10:10]),
	.out(wire_sft14a_out[10:10]));
	soft   sft14a_11
	( 
	.in(wire_sft14a_in[11:11]),
	.out(wire_sft14a_out[11:11]));
	soft   sft14a_12
	( 
	.in(wire_sft14a_in[12:12]),
	.out(wire_sft14a_out[12:12]));
	soft   sft14a_13
	( 
	.in(wire_sft14a_in[13:13]),
	.out(wire_sft14a_out[13:13]));
	soft   sft14a_14
	( 
	.in(wire_sft14a_in[14:14]),
	.out(wire_sft14a_out[14:14]));
	soft   sft14a_15
	( 
	.in(wire_sft14a_in[15:15]),
	.out(wire_sft14a_out[15:15]));
	assign
		wire_sft14a_in = {w347w, {w347w, {wire_le6a_out[9], {wire_le6a_out[8], {wire_le6a_out[7], {wire_sft23a_out[5], {wire_sft23a_out[4], {wire_sft23a_out[3], {wire_sft23a_out[2], {wire_sft23a_out[1], {wire_sft23a_out[0], {wire_le5a_out[2], {wire_le4a_out[3], {wire_le4a_out[2], {w347w, wire_cs1a_1sout}}}}}}}}}}}}}}};
	soft   sft15a_0
	( 
	.in(wire_sft15a_in[0:0]),
	.out(wire_sft15a_out[0:0]));
	soft   sft15a_1
	( 
	.in(wire_sft15a_in[1:1]),
	.out(wire_sft15a_out[1:1]));
	soft   sft15a_2
	( 
	.in(wire_sft15a_in[2:2]),
	.out(wire_sft15a_out[2:2]));
	soft   sft15a_3
	( 
	.in(wire_sft15a_in[3:3]),
	.out(wire_sft15a_out[3:3]));
	soft   sft15a_4
	( 
	.in(wire_sft15a_in[4:4]),
	.out(wire_sft15a_out[4:4]));
	soft   sft15a_5
	( 
	.in(wire_sft15a_in[5:5]),
	.out(wire_sft15a_out[5:5]));
	soft   sft15a_6
	( 
	.in(wire_sft15a_in[6:6]),
	.out(wire_sft15a_out[6:6]));
	soft   sft15a_7
	( 
	.in(wire_sft15a_in[7:7]),
	.out(wire_sft15a_out[7:7]));
	soft   sft15a_8
	( 
	.in(wire_sft15a_in[8:8]),
	.out(wire_sft15a_out[8:8]));
	soft   sft15a_9
	( 
	.in(wire_sft15a_in[9:9]),
	.out(wire_sft15a_out[9:9]));
	soft   sft15a_10
	( 
	.in(wire_sft15a_in[10:10]),
	.out(wire_sft15a_out[10:10]));
	soft   sft15a_11
	( 
	.in(wire_sft15a_in[11:11]),
	.out(wire_sft15a_out[11:11]));
	soft   sft15a_12
	( 
	.in(wire_sft15a_in[12:12]),
	.out(wire_sft15a_out[12:12]));
	soft   sft15a_13
	( 
	.in(wire_sft15a_in[13:13]),
	.out(wire_sft15a_out[13:13]));
	soft   sft15a_14
	( 
	.in(wire_sft15a_in[14:14]),
	.out(wire_sft15a_out[14:14]));
	soft   sft15a_15
	( 
	.in(wire_sft15a_in[15:15]),
	.out(wire_sft15a_out[15:15]));
	assign
		wire_sft15a_in = wire_add12_result;
	soft   sft17a_0
	( 
	.in(wire_sft17a_in[0:0]),
	.out(wire_sft17a_out[0:0]));
	soft   sft17a_1
	( 
	.in(wire_sft17a_in[1:1]),
	.out(wire_sft17a_out[1:1]));
	soft   sft17a_2
	( 
	.in(wire_sft17a_in[2:2]),
	.out(wire_sft17a_out[2:2]));
	soft   sft17a_3
	( 
	.in(wire_sft17a_in[3:3]),
	.out(wire_sft17a_out[3:3]));
	soft   sft17a_4
	( 
	.in(wire_sft17a_in[4:4]),
	.out(wire_sft17a_out[4:4]));
	soft   sft17a_5
	( 
	.in(wire_sft17a_in[5:5]),
	.out(wire_sft17a_out[5:5]));
	soft   sft17a_6
	( 
	.in(wire_sft17a_in[6:6]),
	.out(wire_sft17a_out[6:6]));
	soft   sft17a_7
	( 
	.in(wire_sft17a_in[7:7]),
	.out(wire_sft17a_out[7:7]));
	soft   sft17a_8
	( 
	.in(wire_sft17a_in[8:8]),
	.out(wire_sft17a_out[8:8]));
	soft   sft17a_9
	( 
	.in(wire_sft17a_in[9:9]),
	.out(wire_sft17a_out[9:9]));
	soft   sft17a_10
	( 
	.in(wire_sft17a_in[10:10]),
	.out(wire_sft17a_out[10:10]));
	soft   sft17a_11
	( 
	.in(wire_sft17a_in[11:11]),
	.out(wire_sft17a_out[11:11]));
	soft   sft17a_12
	( 
	.in(wire_sft17a_in[12:12]),
	.out(wire_sft17a_out[12:12]));
	assign
		wire_sft17a_in = {w347w, {w323w, {w323w, {(~ w204w[9]), {wire_le6a_out[6], {wire_le6a_out[5], {wire_le6a_out[4], {wire_le6a_out[3], {wire_le6a_out[2], {wire_le6a_out[1], {wire_le4a_out[4], {wire_le3a_out[5], wire_cs1a_2sout}}}}}}}}}}}};
	soft   sft18a_0
	( 
	.in(wire_sft18a_in[0:0]),
	.out(wire_sft18a_out[0:0]));
	soft   sft18a_1
	( 
	.in(wire_sft18a_in[1:1]),
	.out(wire_sft18a_out[1:1]));
	soft   sft18a_2
	( 
	.in(wire_sft18a_in[2:2]),
	.out(wire_sft18a_out[2:2]));
	soft   sft18a_3
	( 
	.in(wire_sft18a_in[3:3]),
	.out(wire_sft18a_out[3:3]));
	soft   sft18a_4
	( 
	.in(wire_sft18a_in[4:4]),
	.out(wire_sft18a_out[4:4]));
	soft   sft18a_5
	( 
	.in(wire_sft18a_in[5:5]),
	.out(wire_sft18a_out[5:5]));
	soft   sft18a_6
	( 
	.in(wire_sft18a_in[6:6]),
	.out(wire_sft18a_out[6:6]));
	soft   sft18a_7
	( 
	.in(wire_sft18a_in[7:7]),
	.out(wire_sft18a_out[7:7]));
	soft   sft18a_8
	( 
	.in(wire_sft18a_in[8:8]),
	.out(wire_sft18a_out[8:8]));
	soft   sft18a_9
	( 
	.in(wire_sft18a_in[9:9]),
	.out(wire_sft18a_out[9:9]));
	soft   sft18a_10
	( 
	.in(wire_sft18a_in[10:10]),
	.out(wire_sft18a_out[10:10]));
	soft   sft18a_11
	( 
	.in(wire_sft18a_in[11:11]),
	.out(wire_sft18a_out[11:11]));
	soft   sft18a_12
	( 
	.in(wire_sft18a_in[12:12]),
	.out(wire_sft18a_out[12:12]));
	assign
		wire_sft18a_in = {w347w, {w347w, {w347w, {wire_sft23a_out[6], {wire_le5a_out[8], {wire_sft27a_out[2], {wire_sft27a_out[1], {wire_sft27a_out[0], {wire_le5a_out[4], {wire_le5a_out[3], {wire_le3a_out[6], {w347w, wire_le3a_out[4]}}}}}}}}}}}};
	soft   sft19a_0
	( 
	.in(wire_sft19a_in[0:0]),
	.out(wire_sft19a_out[0:0]));
	soft   sft19a_1
	( 
	.in(wire_sft19a_in[1:1]),
	.out(wire_sft19a_out[1:1]));
	soft   sft19a_2
	( 
	.in(wire_sft19a_in[2:2]),
	.out(wire_sft19a_out[2:2]));
	soft   sft19a_3
	( 
	.in(wire_sft19a_in[3:3]),
	.out(wire_sft19a_out[3:3]));
	soft   sft19a_4
	( 
	.in(wire_sft19a_in[4:4]),
	.out(wire_sft19a_out[4:4]));
	soft   sft19a_5
	( 
	.in(wire_sft19a_in[5:5]),
	.out(wire_sft19a_out[5:5]));
	soft   sft19a_6
	( 
	.in(wire_sft19a_in[6:6]),
	.out(wire_sft19a_out[6:6]));
	soft   sft19a_7
	( 
	.in(wire_sft19a_in[7:7]),
	.out(wire_sft19a_out[7:7]));
	soft   sft19a_8
	( 
	.in(wire_sft19a_in[8:8]),
	.out(wire_sft19a_out[8:8]));
	soft   sft19a_9
	( 
	.in(wire_sft19a_in[9:9]),
	.out(wire_sft19a_out[9:9]));
	soft   sft19a_10
	( 
	.in(wire_sft19a_in[10:10]),
	.out(wire_sft19a_out[10:10]));
	soft   sft19a_11
	( 
	.in(wire_sft19a_in[11:11]),
	.out(wire_sft19a_out[11:11]));
	soft   sft19a_12
	( 
	.in(wire_sft19a_in[12:12]),
	.out(wire_sft19a_out[12:12]));
	assign
		wire_sft19a_in = wire_add16_result;
	soft   sft21a_0
	( 
	.in(wire_sft21a_in[0:0]),
	.out(wire_sft21a_out[0:0]));
	soft   sft21a_1
	( 
	.in(wire_sft21a_in[1:1]),
	.out(wire_sft21a_out[1:1]));
	soft   sft21a_2
	( 
	.in(wire_sft21a_in[2:2]),
	.out(wire_sft21a_out[2:2]));
	soft   sft21a_3
	( 
	.in(wire_sft21a_in[3:3]),
	.out(wire_sft21a_out[3:3]));
	soft   sft21a_4
	( 
	.in(wire_sft21a_in[4:4]),
	.out(wire_sft21a_out[4:4]));
	soft   sft21a_5
	( 
	.in(wire_sft21a_in[5:5]),
	.out(wire_sft21a_out[5:5]));
	soft   sft21a_6
	( 
	.in(wire_sft21a_in[6:6]),
	.out(wire_sft21a_out[6:6]));
	assign
		wire_sft21a_in = {w347w, {w323w, {wire_le5a_out[7], {wire_le5a_out[6], {wire_le5a_out[5], {wire_le4a_out[6:5]}}}}}};
	soft   sft22a_0
	( 
	.in(wire_sft22a_in[0:0]),
	.out(wire_sft22a_out[0:0]));
	soft   sft22a_1
	( 
	.in(wire_sft22a_in[1:1]),
	.out(wire_sft22a_out[1:1]));
	soft   sft22a_2
	( 
	.in(wire_sft22a_in[2:2]),
	.out(wire_sft22a_out[2:2]));
	soft   sft22a_3
	( 
	.in(wire_sft22a_in[3:3]),
	.out(wire_sft22a_out[3:3]));
	soft   sft22a_4
	( 
	.in(wire_sft22a_in[4:4]),
	.out(wire_sft22a_out[4:4]));
	soft   sft22a_5
	( 
	.in(wire_sft22a_in[5:5]),
	.out(wire_sft22a_out[5:5]));
	soft   sft22a_6
	( 
	.in(wire_sft22a_in[6:6]),
	.out(wire_sft22a_out[6:6]));
	assign
		wire_sft22a_in = {w347w, {w347w, {(~ w156w[9]), {wire_le4a_out[8], {wire_le4a_out[7], {wire_le3a_out[8:7]}}}}}};
	soft   sft23a_0
	( 
	.in(wire_sft23a_in[0:0]),
	.out(wire_sft23a_out[0:0]));
	soft   sft23a_1
	( 
	.in(wire_sft23a_in[1:1]),
	.out(wire_sft23a_out[1:1]));
	soft   sft23a_2
	( 
	.in(wire_sft23a_in[2:2]),
	.out(wire_sft23a_out[2:2]));
	soft   sft23a_3
	( 
	.in(wire_sft23a_in[3:3]),
	.out(wire_sft23a_out[3:3]));
	soft   sft23a_4
	( 
	.in(wire_sft23a_in[4:4]),
	.out(wire_sft23a_out[4:4]));
	soft   sft23a_5
	( 
	.in(wire_sft23a_in[5:5]),
	.out(wire_sft23a_out[5:5]));
	soft   sft23a_6
	( 
	.in(wire_sft23a_in[6:6]),
	.out(wire_sft23a_out[6:6]));
	assign
		wire_sft23a_in = wire_add20_result;
	soft   sft25a_0
	( 
	.in(wire_sft25a_in[0:0]),
	.out(wire_sft25a_out[0:0]));
	soft   sft25a_1
	( 
	.in(wire_sft25a_in[1:1]),
	.out(wire_sft25a_out[1:1]));
	soft   sft25a_2
	( 
	.in(wire_sft25a_in[2:2]),
	.out(wire_sft25a_out[2:2]));
	assign
		wire_sft25a_in = {w347w, {2{w323w}}};
	soft   sft26a_0
	( 
	.in(wire_sft26a_in[0:0]),
	.out(wire_sft26a_out[0:0]));
	soft   sft26a_1
	( 
	.in(wire_sft26a_in[1:1]),
	.out(wire_sft26a_out[1:1]));
	soft   sft26a_2
	( 
	.in(wire_sft26a_in[2:2]),
	.out(wire_sft26a_out[2:2]));
	assign
		wire_sft26a_in = {w347w, {w347w, (~ w101w[9])}};
	soft   sft27a_0
	( 
	.in(wire_sft27a_in[0:0]),
	.out(wire_sft27a_out[0:0]));
	soft   sft27a_1
	( 
	.in(wire_sft27a_in[1:1]),
	.out(wire_sft27a_out[1:1]));
	soft   sft27a_2
	( 
	.in(wire_sft27a_in[2:2]),
	.out(wire_sft27a_out[2:2]));
	assign
		wire_sft27a_in = wire_add24_result;
	soft   sft9a_0
	( 
	.in(wire_sft9a_in[0:0]),
	.out(wire_sft9a_out[0:0]));
	soft   sft9a_1
	( 
	.in(wire_sft9a_in[1:1]),
	.out(wire_sft9a_out[1:1]));
	soft   sft9a_2
	( 
	.in(wire_sft9a_in[2:2]),
	.out(wire_sft9a_out[2:2]));
	soft   sft9a_3
	( 
	.in(wire_sft9a_in[3:3]),
	.out(wire_sft9a_out[3:3]));
	soft   sft9a_4
	( 
	.in(wire_sft9a_in[4:4]),
	.out(wire_sft9a_out[4:4]));
	soft   sft9a_5
	( 
	.in(wire_sft9a_in[5:5]),
	.out(wire_sft9a_out[5:5]));
	soft   sft9a_6
	( 
	.in(wire_sft9a_in[6:6]),
	.out(wire_sft9a_out[6:6]));
	soft   sft9a_7
	( 
	.in(wire_sft9a_in[7:7]),
	.out(wire_sft9a_out[7:7]));
	soft   sft9a_8
	( 
	.in(wire_sft9a_in[8:8]),
	.out(wire_sft9a_out[8:8]));
	soft   sft9a_9
	( 
	.in(wire_sft9a_in[9:9]),
	.out(wire_sft9a_out[9:9]));
	soft   sft9a_10
	( 
	.in(wire_sft9a_in[10:10]),
	.out(wire_sft9a_out[10:10]));
	soft   sft9a_11
	( 
	.in(wire_sft9a_in[11:11]),
	.out(wire_sft9a_out[11:11]));
	soft   sft9a_12
	( 
	.in(wire_sft9a_in[12:12]),
	.out(wire_sft9a_out[12:12]));
	soft   sft9a_13
	( 
	.in(wire_sft9a_in[13:13]),
	.out(wire_sft9a_out[13:13]));
	soft   sft9a_14
	( 
	.in(wire_sft9a_in[14:14]),
	.out(wire_sft9a_out[14:14]));
	soft   sft9a_15
	( 
	.in(wire_sft9a_in[15:15]),
	.out(wire_sft9a_out[15:15]));
	soft   sft9a_16
	( 
	.in(wire_sft9a_in[16:16]),
	.out(wire_sft9a_out[16:16]));
	soft   sft9a_17
	( 
	.in(wire_sft9a_in[17:17]),
	.out(wire_sft9a_out[17:17]));
	soft   sft9a_18
	( 
	.in(wire_sft9a_in[18:18]),
	.out(wire_sft9a_out[18:18]));
	assign
		wire_sft9a_in = {w323w, {w323w, {wire_sft15a_out[14], {wire_sft15a_out[13], {wire_sft15a_out[12], {wire_sft15a_out[11], {wire_sft15a_out[10], {wire_sft15a_out[9], {wire_sft15a_out[8], {wire_sft15a_out[7], {wire_sft15a_out[6], {wire_sft15a_out[5], {wire_sft15a_out[4], {wire_sft15a_out[3], {wire_sft15a_out[2], {wire_le4a_out[1], {wire_le4a_out[0], {wire_le3a_out[1:0]}}}}}}}}}}}}}}}}}};
	assign
		dataa_node = {dataa[7:0]},
		datab_node = {datab[7:0]},
		final_result_node = {w514w[15:0]},
		result = {final_result_node[15:0]},
		w101w = wire_le3a_out,
		w156w = wire_le4a_out,
		w204w = wire_le5a_out,
		w260w = {{2{1'b0}}, dataa_node},
		w323w = 1'b1,
		w347w = 1'b0,
		w514w = {wire_sft11a_out[18:17], wire_sft11a_out[16:15], wire_sft11a_out[14:13], wire_sft11a_out[12:11], wire_sft11a_out[10:9], wire_sft11a_out[8:7], wire_sft11a_out[6:5], wire_sft11a_out[4:3], wire_sft11a_out[2:1], wire_sft11a_out[0]},
		w7w = {{2{1'b0}}, datab_node};
endmodule //mult_gates_mult
//VALID FILE


// synopsys translate_off
`timescale 1 ps / 1 ps
// synopsys translate_on
module mult_gates (
	dataa,
	datab,
	result)/* synthesis synthesis_clearbox = 1 */;

	input	[7:0]  dataa;
	input	[7:0]  datab;
	output	[15:0]  result;

	wire [15:0] sub_wire0;
	wire [15:0] result = sub_wire0[15:0];

	mult_gates_mult	mult_gates_mult_component (
				.dataa (dataa),
				.datab (datab),
				.result (sub_wire0));

endmodule

// ============================================================
// CNX file retrieval info
// ============================================================
// Retrieval info: PRIVATE: AutoSizeResult NUMERIC "1"
// Retrieval info: PRIVATE: B_isConstant NUMERIC "0"
// Retrieval info: PRIVATE: ConstantB NUMERIC "0"
// Retrieval info: PRIVATE: INTENDED_DEVICE_FAMILY STRING "Cyclone IV E"
// Retrieval info: PRIVATE: LPM_PIPELINE NUMERIC "0"
// Retrieval info: PRIVATE: Latency NUMERIC "0"
// Retrieval info: PRIVATE: SYNTH_WRAPPER_GEN_POSTFIX STRING "1"
// Retrieval info: PRIVATE: SignedMult NUMERIC "0"
// Retrieval info: PRIVATE: USE_MULT NUMERIC "1"
// Retrieval info: PRIVATE: ValidConstant NUMERIC "0"
// Retrieval info: PRIVATE: WidthA NUMERIC "8"
// Retrieval info: PRIVATE: WidthB NUMERIC "8"
// Retrieval info: PRIVATE: WidthP NUMERIC "16"
// Retrieval info: PRIVATE: aclr NUMERIC "0"
// Retrieval info: PRIVATE: clken NUMERIC "0"
// Retrieval info: PRIVATE: new_diagram STRING "1"
// Retrieval info: PRIVATE: optimize NUMERIC "1"
// Retrieval info: LIBRARY: lpm lpm.lpm_components.all
// Retrieval info: CONSTANT: LPM_HINT STRING "DEDICATED_MULTIPLIER_CIRCUITRY=NO,MAXIMIZE_SPEED=9"
// Retrieval info: CONSTANT: LPM_REPRESENTATION STRING "UNSIGNED"
// Retrieval info: CONSTANT: LPM_TYPE STRING "LPM_MULT"
// Retrieval info: CONSTANT: LPM_WIDTHA NUMERIC "8"
// Retrieval info: CONSTANT: LPM_WIDTHB NUMERIC "8"
// Retrieval info: CONSTANT: LPM_WIDTHP NUMERIC "16"
// Retrieval info: USED_PORT: dataa 0 0 8 0 INPUT NODEFVAL "dataa[7..0]"
// Retrieval info: USED_PORT: datab 0 0 8 0 INPUT NODEFVAL "datab[7..0]"
// Retrieval info: USED_PORT: result 0 0 16 0 OUTPUT NODEFVAL "result[15..0]"
// Retrieval info: CONNECT: @dataa 0 0 8 0 dataa 0 0 8 0
// Retrieval info: CONNECT: @datab 0 0 8 0 datab 0 0 8 0
// Retrieval info: CONNECT: result 0 0 16 0 @result 0 0 16 0
// Retrieval info: GEN_FILE: TYPE_NORMAL mult_gates.v TRUE
// Retrieval info: GEN_FILE: TYPE_NORMAL mult_gates.inc FALSE
// Retrieval info: GEN_FILE: TYPE_NORMAL mult_gates.cmp FALSE
// Retrieval info: GEN_FILE: TYPE_NORMAL mult_gates.bsf FALSE
// Retrieval info: GEN_FILE: TYPE_NORMAL mult_gates_inst.v FALSE
// Retrieval info: GEN_FILE: TYPE_NORMAL mult_gates_bb.v TRUE
// Retrieval info: GEN_FILE: TYPE_NORMAL mult_gates_syn.v TRUE
// Retrieval info: LIB_FILE: lpm
